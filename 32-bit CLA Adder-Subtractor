//currently debugging, looking further for how genvar works and how we can use it, office hours friday?
module CLA(A, B, Cin, S, Cout);
  input [31:0] A, B;
  input Cin;
  output [31:0] S;
  output Cout;

  wire [7:0] G, P;
  wire [7:0] C;
  
  genvar i;
  generate
    for (i = 0; i < 8; i = i + 1) begin : gen_block
      ripple_carry_adder_4bit RCA (
        .A(A[4*i+3:4*i]),      
        .B(B[4*i+3:4*i]),      
        .Cin(C[i]),
        .S(S[4*i+3:4*i]),
        .Cout(C[i+1])
      );
      
      assign P[i] = (A[4*i+3:4*i] ^ B[4*i+3:4*i]);
      assign G[i] = (A[4*i+3:4*i] & B[4*i+3:4*i]);
    end
  endgenerate
  
  assign C[0] = Cin;
  generate
    for (i = 1; i < 8; i = i + 1) begin : carry_logic
      assign C[i] = G[i-1] | (P[i-1] & C[i-1]);
    end
  endgenerate
  
  assign Cout = C[7];
  
endmodule
