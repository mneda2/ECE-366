`timescale 1ns / 1ps  // Specify time unit and precision

module testbench;
  reg [3:0] A, B;
  reg mode;
  wire [3:0] D;
  wire Cout;

  // Instantiate the module
  ripple_carry_adder_subtractor_4bit uut (
    .A(A), 
    .B(B), 
    .mode(mode), 
    .D(D), 
    .Cout(Cout)
  );

  initial begin
    // Print header
    $display("Time   | A     B    Mode | D     Cout");
    $display("-------------------------------------");

    // Monitor for continuous printing
    $monitor("%0d ns | %b  %b   %b   | %b    %b", 
             $time, A, B, mode, D, Cout);

    // Test 1: Addition (3 + 2 = 5)
    A = 4'b0011; B = 4'b0010; mode = 0; #10;

    // Test 2: Subtraction (5 - 3 = 2)
    A = 4'b0101; B = 4'b0011; mode = 1; #10;

    // Test 3: Unsigned overflow (15 + 1 = 0 with carry)
    A = 4'b1111; B = 4'b0001; mode = 0; #10;

    // Test 4: Signed subtraction (-8 - 1 = -9)
    A = 4'b1000; B = 4'b0001; mode = 1; #10;

    $finish;  // End the simulation
  end
endmodule







// MAIN CODE - mode included

// Code your design here
module ripple_carry_subtractor_4bit(A, B, mode, D, Cout); 
  input [3:0] A, B;
  
  input mode;
  output [3:0] D;
  output Cout;
  wire [3:0] B_op;

  wire c1, c2, c3;
  assign B_op = B ^ {4{mode}}; // if mode = 1 via testbench, then it will be B( 4- bit ) XOR 1111, which will give the inverted output

  one_bit_full_adder_b FA0(A[0], B_op[0], mode, D[0], c1); 
  one_bit_full_adder_b FA1(A[1], B_op[1], c1, D[1], c2);   
  one_bit_full_adder_b FA2(A[2], B_op[2], c2, D[2], c3);    
  one_bit_full_adder_b FA3(A[3], B_op[3], c3, D[3], Cout);  

endmodule

module one_bit_full_adder_b(A, B, Cin, S, // another example
Cout);

  input A, B, Cin;
  output S, Cout;

 // Your code
 
  wire m,v,p;
  xor (m, A, B);
  xor (S, m, Cin);
  and (v, A, B);
  and (p, m, Cin);
  or (Cout,v,p);

endmodule
