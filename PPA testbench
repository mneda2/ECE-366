`timescale 1ns/1ps  

module testbench_16bitPPA;

  reg [15:0] A, B;          // 16-bit inputs
  reg Cin;                  // Carry-in input
  wire [15:0] S;            // 16-bit sum output
  wire Cout;                // Carry-out output
  reg [15:0] expected_S;    // Expected sum
  reg expected_Cout;        // Expected carry-out

  // Instance of the Parallel Prefix Adder (PPA)
  bit16PPA DUT (
    .A(A), 
    .B(B), 
    .Cin(Cin), 
    .S(S), 
    .Cout(Cout)
  );

  initial begin
    // Monitor the outputs and compare them with expected values
    $monitor("Time=%0t A=%h B=%h Cin=%b => S=%h Cout=%b | Expected S=%h Expected Cout=%b", 
             $time, A, B, Cin, S, Cout, expected_S, expected_Cout);

    // Test Case 1: A = 0, B = 0, Cin = 0
    A = 16'h0000; B = 16'h0000; Cin = 0;
    expected_S = A + B + Cin; expected_Cout = (A + B + Cin) > 16'hFFFF;
    #10;

    // Test Case 2: A = 0xFFFF, B = 0x0001, Cin = 0
    A = 16'hFFFF; B = 16'h0001; Cin = 0;
    expected_S = A + B + Cin; expected_Cout = (A + B + Cin) > 16'hFFFF;
    #10;

    // Test Case 3: A = 0x1234, B = 0x5678, Cin = 0
    A = 16'h1234; B = 16'h5678; Cin = 0;
    expected_S = A + B + Cin; expected_Cout = (A + B + Cin) > 16'hFFFF;
    #10;

    // Test Case 4: A = 0x8000, B = 0x8000, Cin = 0
    A = 16'h8000; B = 16'h8000; Cin = 0;
    expected_S = A + B + Cin; expected_Cout = (A + B + Cin) > 16'hFFFF;
    #10;

    // Test Case 5: A = 0x1357, B = 0x2468, Cin = 1
    A = 16'h1357; B = 16'h2468; Cin = 1;
    expected_S = A + B + Cin; expected_Cout = (A + B + Cin) > 16'hFFFF;
    #10;

    $stop;
  end

endmodule
