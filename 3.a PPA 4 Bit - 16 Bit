module ppa4bit (A, B, Cin, S, Cout);  
  input [3:0] A, B;                                 
  input Cin;
  output [3:0] S;
  output Cout;
  
  wire [3:0] P, G;  
  wire c1, c2, c3;  
  
  assign P = A ^ B;
  assign G = A & B;
  
  assign c1 = G[0] | (P[0] & Cin);
  assign c2 = G[1] | (P[1] & c1);
  assign c3 = G[2] | (P[2] & c2);
  assign Cout = G[3] | (P[3] & c3);
  
  assign S[0] = P[0] ^ Cin;
  assign S[1] = P[1] ^ c1;
  assign S[2] = P[2] ^ c2;
  assign S[3] = P[3] ^ c3;

endmodule 


module ppa16bit (A, B, Cin, S, Cout);  
  input [15:0] A, B;   
  input Cin;           
  output [15:0] S;    
  output Cout;         
  
  wire c1, c2, c3, c4, c5, c6, c7, c8;  

  ppa4bit PPA0(A[3:0],B[3:0],Cin,S[3:0],c1);
  ppa4bit PPA1(A[7:4],B[7:4],c1,S[7:4],c2);
  ppa4bit PPA2(A[11:8],B[11:8],c2,S[11:8],c3);
  ppa4bit PPA3(A[15:12],B[15:12],c3,S[15:12],Cout);

endmodule

*************************************************************

module PPA_16bit (
    input [15:0] A, B,
    input Cin,
    output [15:0] S,
    output Cout
);
    wire [15:0] P, G;
    wire [15:0] P_block, G_block;

    assign P = A | B;
    assign G = A & B;

    assign P_block[0] = P[0];
    assign G_block[0] = G[0];

    genvar i;
    generate
        for (i = 1; i < 16; i = i + 1) begin : block
            assign P_block[i] = P_block[i-1] & P[i];
            assign G_block[i] = G_block[i-1] | (P_block[i-1] & G[i]);
        end
    endgenerate

    assign S[0] = G_block[0] ^ (A[0] ^ B[0]);
    generate
        for (i = 1; i < 16; i = i + 1) begin : sum
            assign S[i] = G_block[i] ^ (A[i] ^ B[i]);
        end
    endgenerate

    assign Cout = G_block[15] | (P_block[15] & G[14]);

endmodule
