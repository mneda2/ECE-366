module ripple_carry_adder_subtractor_4bit(
    input [3:0] A, B,
    input mode,  
    output wire [3:0] S, 
    output wire Cout
);
    reg [3:0] B_operand;
    wire c1, c2, c3;

    always @(*) begin
        if (mode == 1) begin
            B_operand = ~B;
        end 
        else begin
            B_operand = B;
        end
    end

    one_bit_full_adder_b FA0(A[0], B_operand[0], mode, S[0], c1);
    one_bit_full_adder_b FA1(A[1], B_operand[1], c1, S[1], c2);
    one_bit_full_adder_b FA2(A[2], B_operand[2], c2, S[2], c3);
    one_bit_full_adder_b FA3(A[3], B_operand[3], c3, S[3], Cout);

endmodule

module one_bit_full_adder_b(
    input A, B, Cin,
    output S, Cout
);
    wire m, v, p;
    xor (m, A, B);
    xor (S, m, Cin);
    and (v, A, B);
    and (p, m, Cin);
    or (Cout, v, p);
endmodule
